USING PROPS WITH STATELESS FUNCTIONAL CCOMPONENTS ------------------------>
    > A stateless functional component is any function you write which 
    accepts props and returns JSX. 

    > A stateless component is a class that extends React.Component, but does 
    not use internal state.

    > A stateful component is a class component that does maintain its own 
    internal state; referred to a React components. 


CREATE A STATEFUL COMPONENT ----------------------------------------------->
    > State consists of any data your application needs to know about, that 
    can change over time. 
    > You want your apps to respond to state changes and present an updated 
    UI when necessary. 

    > You create state in a React component by declaring a state property on 
    the component class in its constructor. This initializes the component 
    with state when it is created. 
    > You have access to the state object throughout the life of your 
    component. You can update it, render it in your UI, and pass it as props
    to child components. 


RENDER STATE IN THE UI ---------------------------------------------------->
    > If a component is stateful, it will always have access to the data in 
    state in its rener() method. You can access the data with this.state. 

    > React uses a virtualDOM to keep track of changes behind the scenes. 
    When state data updates, it triggers a re-render of the components using 
    that data. React updates the actual DOM, but only when necessary. 
    This means you don't have to worry about changing the DOM, you just 
    declare what the UI should look like. 

    > If you make a component stateful, no other components are aware of its 
    state. It's state is local to that component, unless you pass state data
    to a child component as props. 

SET STATE WITH this.setState () ------------------------------------------>
    > React provides a method for updating component state called setState.
    > You call the setState method within your component class such as:
    this.setState(), passing in an object with key-value pairs. The keys 
    are the state properties and the values are the updated state data. 
    > React expects you to never modify state directly, instead use 
    this.setState() when state changes occur. 


BIND 'THIS' TO A CLASS METHOD -------------------------------------------->
    > A class method typically needs to use the this keyword so it can 
    access properties on the class (such as state and props) inside the scope
    of the method.
        1. One common way is to explicitly bind this in the constructor so 
        this becomes bound to the class methods when the componenet is 
        initialized: this.handleClick = this.handleClick.bind(this);


USE STATE TO TOGGLE AN ELEMENT ------------------------------------------->
    > Sometimes you might need to know the previous state when updating the 
    state. So you should pass setState a function that allows you to access
    state and props. Using a function with setState guarantees you are 
    working with the most current values of state and props. You have to
    wrap the object literal in parentheses, otherwise JS thinks its a block
    of code. (example in 'simple-counter' direcotry)















REFERENCES:
FreeCodeCamp.org freecodecamp.org (n.d). retrieved August 2, 2022 from 
https://www.freecodecamp.org/learn/front-end-development-libraries/react
/set-state-with-this-setstate